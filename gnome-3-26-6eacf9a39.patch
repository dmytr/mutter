From edfd15b32daca9fef707a25bf312441349506b05 Mon Sep 17 00:00:00 2001
From: Daniel Stone <daniels@collabora.com>
Date: Mon, 2 Oct 2017 16:46:17 +0100
Subject: [PATCH 01/17] wayland-dma-buf: Don't send modifiers to old clients

The modifier event was only added in v3 of the client; sending it to
older clients (e.g. GStreamer waylandsink) causes them to disconnect
immediately.

Send the older 'format' event to all clients, and only send the newer
'modifier' event to resource versions 3 or above.

https://bugzilla.gnome.org/show_bug.cgi?id=788558
---
 src/wayland/meta-wayland-dma-buf.c | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

diff --git a/src/wayland/meta-wayland-dma-buf.c b/src/wayland/meta-wayland-dma-buf.c
index e5d2f7c35..76b8aa219 100644
--- a/src/wayland/meta-wayland-dma-buf.c
+++ b/src/wayland/meta-wayland-dma-buf.c
@@ -473,12 +473,19 @@ send_modifiers (struct wl_resource *resource,
   gboolean ret;
   int i;
 
+  zwp_linux_dmabuf_v1_send_format (resource, format);
+
+  /* The modifier event was only added in v3; v1 and v2 only have the format
+   * event. */
+  if (wl_resource_get_version (resource) < ZWP_LINUX_DMABUF_V1_MODIFIER_SINCE_VERSION)
+    return;
+
   /* First query the number of available modifiers, then allocate an array,
    * then fill the array. */
   ret = meta_egl_query_dma_buf_modifiers (egl, egl_display, format, 0, NULL,
                                           NULL, &num_modifiers, NULL);
   if (!ret || num_modifiers == 0)
-     return;
+    return;
 
   modifiers = g_new0 (uint64_t, num_modifiers);
   ret = meta_egl_query_dma_buf_modifiers (egl, egl_display, format,
-- 
2.13.5

From 62a772807f2a5a72f69a022cefed9c6625616524 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Florian=20M=C3=BCllner?= <fmuellner@gnome.org>
Date: Thu, 5 Oct 2017 21:38:25 +0200
Subject: [PATCH 02/17] build: Fetch pipewire micro version

Pipewire doesn't export its version defines, so the API checks added
in commit f0c6c4eb1fa2b21e38 effectively disable screencasting, whoops.
Breaking changes like this should disappear once the library stabilizes,
so simply define the version ourselves instead of writing a "proper"
test with AC_COMPILE_IFELSE() ...

https://bugzilla.gnome.org/show_bug.cgi?id=788572
---
 configure.ac | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/configure.ac b/configure.ac
index 89c15e23b..a5870e6ab 100644
--- a/configure.ac
+++ b/configure.ac
@@ -245,6 +245,10 @@ AC_ARG_ENABLE(remote-desktop,
 )
 AS_IF([test "$enable_remote_desktop" = "yes"], [
   MUTTER_PC_MODULES="$MUTTER_PC_MODULES libpipewire-0.1 >= 0.1.4"
+  PKG_CHECK_EXISTS([libpipewire-0.1], [
+    pw_micro=`$PKG_CONFIG --modversion libpipewire-0.1 | cut -d. -f3`
+    AC_DEFINE_UNQUOTED([PIPEWIRE_VERSION_MICRO],[$pw_micro], [Pipewire micro version used])
+  ])
   AC_DEFINE([HAVE_REMOTE_DESKTOP],[1], [Defined if screen cast and remote desktop support is enabled])
 ])
 AM_CONDITIONAL([HAVE_REMOTE_DESKTOP],[test "$enable_remote_desktop" = "yes"])
-- 
2.13.5

From 7b02e2daf9a5f6627c3fa3d1806c715c3c37e20d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Thu, 5 Oct 2017 14:16:35 -0400
Subject: [PATCH 03/17] screen-cast-stream-src: Only clean up pipewire
 remote/core if they exist

They can could fail to create, so lets deal better with that
possibility.

https://bugzilla.gnome.org/show_bug.cgi?id=788569
---
 src/backends/meta-screen-cast-stream-src.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/backends/meta-screen-cast-stream-src.c b/src/backends/meta-screen-cast-stream-src.c
index e6d99d592..0343ea458 100644
--- a/src/backends/meta-screen-cast-stream-src.c
+++ b/src/backends/meta-screen-cast-stream-src.c
@@ -593,8 +593,8 @@ meta_screen_cast_stream_src_finalize (GObject *object)
     meta_screen_cast_stream_src_disable (src);
 
   g_clear_pointer (&priv->pipewire_stream, (GDestroyNotify) pw_stream_destroy);
-  pw_remote_destroy (priv->pipewire_remote);
-  pw_core_destroy (priv->pipewire_core);
+  g_clear_pointer (&priv->pipewire_remote, (GDestroyNotify) pw_remote_destroy);
+  g_clear_pointer (&priv->pipewire_core, (GDestroyNotify) pw_core_destroy);
   g_source_destroy (&priv->pipewire_source->base);
 
   G_OBJECT_CLASS (meta_screen_cast_stream_src_parent_class)->finalize (object);
-- 
2.13.5

From 8886e1bbdcb712d1e70873b2cccb7ab62e6a3eec Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Sat, 7 Oct 2017 00:33:39 -0400
Subject: [PATCH 04/17] window: Handle updating from no to no monitor

When we received two hot plug events that both resulted in headless
configuration, we tried to find a new window monitor given the old.
That resulted in a null pointer dereference; avoid that by only trying
to find the same monitor if there was an old one.

https://bugzilla.gnome.org/show_bug.cgi?id=788607
---
 src/core/window.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/core/window.c b/src/core/window.c
index dc60a667c..c2d9869d2 100644
--- a/src/core/window.c
+++ b/src/core/window.c
@@ -3793,7 +3793,7 @@ meta_window_update_for_monitors_changed (MetaWindow *window)
   new = find_monitor_by_winsys_id (window, window->preferred_output_winsys_id);
 
   /* Otherwise, try to find the old output on a new monitor */
-  if (!new)
+  if (old && !new)
     new = find_monitor_by_winsys_id (window, old->winsys_id);
 
   /* Fall back to primary if everything else failed */
-- 
2.13.5

From 425df31cf9f70c4ff8ae691e1e671b9b3cd2e067 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Sat, 7 Oct 2017 00:35:23 -0400
Subject: [PATCH 05/17] monitor-unit-tests: Check going headless -> headless

https://bugzilla.gnome.org/show_bug.cgi?id=788607
---
 src/tests/monitor-unit-tests.c | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/src/tests/monitor-unit-tests.c b/src/tests/monitor-unit-tests.c
index 668565043..b2d18c48b 100644
--- a/src/tests/monitor-unit-tests.c
+++ b/src/tests/monitor-unit-tests.c
@@ -2631,6 +2631,13 @@ meta_test_monitor_no_outputs (void)
 
   emulate_hotplug (test_setup);
   check_monitor_configuration (&test_case);
+
+  /* Also check that we handle going headless -> headless */
+  test_setup = create_monitor_test_setup (&test_case,
+                                          MONITOR_TEST_FLAG_NO_STORED);
+
+  emulate_hotplug (test_setup);
+  check_monitor_configuration (&test_case);
 }
 
 static void
-- 
2.13.5

From 41f7a5fdf3bd95bd13e43e2151d29157d1dc5168 Mon Sep 17 00:00:00 2001
From: polygamma <jonny.westphalen@googlemail.com>
Date: Mon, 9 Oct 2017 16:14:13 +0200
Subject: [PATCH 06/17] x11: Protect XChangeProperty call with error traps

They may happen around the time a window is destroyed, thus could result
on BadWindow X errors.

https://bugzilla.gnome.org/show_bug.cgi?id=788666
---
 src/x11/window-x11.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/x11/window-x11.c b/src/x11/window-x11.c
index 36a5e70a3..4885f5fea 100644
--- a/src/x11/window-x11.c
+++ b/src/x11/window-x11.c
@@ -920,11 +920,13 @@ update_gtk_edge_constraints (MetaWindow *window)
 
   meta_verbose ("Setting _GTK_EDGE_CONSTRAINTS to %lu\n", data[0]);
 
+  meta_error_trap_push (window->display);
   XChangeProperty (window->display->xdisplay,
                    window->xwindow,
                    window->display->atom__GTK_EDGE_CONSTRAINTS,
                    XA_CARDINAL, 32, PropModeReplace,
                    (guchar*) data, 1);
+  meta_error_trap_pop (window->display);
 }
 
 static gboolean
-- 
2.13.5

From 65d3e479875348978d0137e9913f19fa8b0174d9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Wed, 11 Oct 2017 17:55:50 +0800
Subject: [PATCH 07/17] settings: Get UI scaling factor from primary logical
 monitor

Don't use MAX(logical monitor scales) to determine the UI scaling
factor, just use the primary logical monitor. That's where the shell UI
will most likely be.

https://bugzilla.gnome.org/show_bug.cgi?id=788820
---
 src/backends/meta-settings.c | 21 ++++++---------------
 1 file changed, 6 insertions(+), 15 deletions(-)

diff --git a/src/backends/meta-settings.c b/src/backends/meta-settings.c
index cf66334f1..73741fd5a 100644
--- a/src/backends/meta-settings.c
+++ b/src/backends/meta-settings.c
@@ -67,23 +67,14 @@ calculate_ui_scaling_factor (MetaSettings *settings)
 {
   MetaMonitorManager *monitor_manager =
     meta_backend_get_monitor_manager (settings->backend);
-  GList *logical_monitors;
-  GList *l;
-  float max_scale = 1.0;
+  MetaLogicalMonitor *primary_logical_monitor;
 
-  logical_monitors =
-    meta_monitor_manager_get_logical_monitors (monitor_manager);
-  for (l = logical_monitors; l; l = l->next)
-    {
-      MetaLogicalMonitor *logical_monitor = l->data;
-
-      max_scale = MAX (meta_logical_monitor_get_scale (logical_monitor),
-                       max_scale);
-    }
-
-  g_warn_if_fail (fmodf (max_scale, 1.0) == 0.0);
+  primary_logical_monitor =
+    meta_monitor_manager_get_primary_logical_monitor (monitor_manager);
+  if (!primary_logical_monitor)
+    return 1;
 
-  return (int) max_scale;
+  return (int) meta_logical_monitor_get_scale (primary_logical_monitor);
 }
 
 static gboolean
-- 
2.13.5

From 0a3549da0658e46811aab5051d58526b3a578443 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marco=20Trevisan=20=28Trevi=C3=B1o=29?= <mail@3v1n0.net>
Date: Thu, 12 Oct 2017 19:14:40 -0500
Subject: [PATCH 08/17] backends: add 'monitors-updated-internal' signal to
 only update internal state

Adding an internal signal and use it to update the internal state before
emitting "monitors-changed" which will be repeated by the screen to the world.

https://bugzilla.gnome.org/show_bug.cgi?id=788860
---
 src/backends/meta-backend.c                       |  2 --
 src/backends/meta-input-settings.c                |  2 +-
 src/backends/meta-monitor-manager.c               | 11 +++++++++++
 src/backends/meta-screen-cast-monitor-stream.c    |  2 +-
 src/backends/meta-settings.c                      | 14 ++++++++++++++
 src/backends/native/meta-cursor-renderer-native.c |  2 +-
 src/backends/x11/meta-backend-x11.c               |  2 +-
 src/core/screen.c                                 | 18 ++++++++++++++----
 src/wayland/meta-wayland-outputs.c                |  2 +-
 9 files changed, 44 insertions(+), 11 deletions(-)

diff --git a/src/backends/meta-backend.c b/src/backends/meta-backend.c
index faa8d6fdc..89d47eb80 100644
--- a/src/backends/meta-backend.c
+++ b/src/backends/meta-backend.c
@@ -196,8 +196,6 @@ meta_backend_monitors_changed (MetaBackend *backend)
           priv->is_pointer_position_initialized = TRUE;
         }
     }
-
-  meta_settings_update_ui_scaling_factor (priv->settings);
 }
 
 void
diff --git a/src/backends/meta-input-settings.c b/src/backends/meta-input-settings.c
index d6c7b57b6..065875552 100644
--- a/src/backends/meta-input-settings.c
+++ b/src/backends/meta-input-settings.c
@@ -1617,7 +1617,7 @@ meta_input_settings_init (MetaInputSettings *settings)
     g_hash_table_new_full (NULL, NULL, NULL, (GDestroyNotify) device_mapping_info_free);
 
   priv->monitor_manager = g_object_ref (meta_monitor_manager_get ());
-  g_signal_connect (priv->monitor_manager, "monitors-changed",
+  g_signal_connect (priv->monitor_manager, "monitors-changed-internal",
                     G_CALLBACK (monitors_changed_cb), settings);
 
 #ifdef HAVE_LIBWACOM
diff --git a/src/backends/meta-monitor-manager.c b/src/backends/meta-monitor-manager.c
index 2caec1b57..fd2aca969 100644
--- a/src/backends/meta-monitor-manager.c
+++ b/src/backends/meta-monitor-manager.c
@@ -46,6 +46,7 @@
 #define DEFAULT_DISPLAY_CONFIGURATION_TIMEOUT 20
 
 enum {
+  MONITORS_CHANGED_INTERNAL,
   CONFIRM_DISPLAY_CHANGE,
   SIGNALS_LAST
 };
@@ -851,6 +852,14 @@ meta_monitor_manager_class_init (MetaMonitorManagerClass *klass)
   klass->read_edid = meta_monitor_manager_real_read_edid;
   klass->is_lid_closed = meta_monitor_manager_real_is_lid_closed;
 
+  signals[MONITORS_CHANGED_INTERNAL] =
+    g_signal_new ("monitors-changed-internal",
+                  G_TYPE_FROM_CLASS (object_class),
+                  G_SIGNAL_RUN_LAST,
+                  0,
+                  NULL, NULL, NULL,
+                  G_TYPE_NONE, 0);
+
   signals[CONFIRM_DISPLAY_CHANGE] =
     g_signal_new ("confirm-display-change",
 		  G_TYPE_FROM_CLASS (object_class),
@@ -2574,6 +2583,8 @@ meta_monitor_manager_notify_monitors_changed (MetaMonitorManager *manager)
   manager->current_switch_config = META_MONITOR_SWITCH_CONFIG_UNKNOWN;
 
   meta_backend_monitors_changed (backend);
+
+  g_signal_emit (manager, signals[MONITORS_CHANGED_INTERNAL], 0);
   g_signal_emit_by_name (manager, "monitors-changed");
 }
 
diff --git a/src/backends/meta-screen-cast-monitor-stream.c b/src/backends/meta-screen-cast-monitor-stream.c
index ece7efcdd..853090a43 100644
--- a/src/backends/meta-screen-cast-monitor-stream.c
+++ b/src/backends/meta-screen-cast-monitor-stream.c
@@ -130,7 +130,7 @@ meta_screen_cast_monitor_stream_new (GDBusConnection     *connection,
 
   monitor_stream->stage = stage;
 
-  g_signal_connect_object (monitor_manager, "monitors-changed",
+  g_signal_connect_object (monitor_manager, "monitors-changed-internal",
                            G_CALLBACK (on_monitors_changed),
                            monitor_stream, 0);
 
diff --git a/src/backends/meta-settings.c b/src/backends/meta-settings.c
index 73741fd5a..cb22bf33c 100644
--- a/src/backends/meta-settings.c
+++ b/src/backends/meta-settings.c
@@ -343,11 +343,25 @@ meta_settings_init (MetaSettings *settings)
   update_experimental_features (settings);
 }
 
+static void
+on_monitors_changed (MetaMonitorManager *monitor_manager,
+                     MetaSettings       *settings)
+{
+  meta_settings_update_ui_scaling_factor (settings);
+}
+
 void
 meta_settings_post_init (MetaSettings *settings)
 {
+  MetaMonitorManager *monitor_manager =
+    meta_backend_get_monitor_manager (settings->backend);
+
   update_ui_scaling_factor (settings);
   update_font_dpi (settings);
+
+  g_signal_connect_object (monitor_manager, "monitors-changed-internal",
+                           G_CALLBACK (on_monitors_changed),
+                           settings, G_CONNECT_AFTER);
 }
 
 static void
diff --git a/src/backends/native/meta-cursor-renderer-native.c b/src/backends/native/meta-cursor-renderer-native.c
index 72276ebe2..9b2c03aaa 100644
--- a/src/backends/native/meta-cursor-renderer-native.c
+++ b/src/backends/native/meta-cursor-renderer-native.c
@@ -850,7 +850,7 @@ meta_cursor_renderer_native_init (MetaCursorRendererNative *native)
   MetaMonitorManager *monitors;
 
   monitors = meta_monitor_manager_get ();
-  g_signal_connect_object (monitors, "monitors-changed",
+  g_signal_connect_object (monitors, "monitors-changed-internal",
                            G_CALLBACK (on_monitors_changed), native, 0);
 
   priv->hw_state_invalidated = TRUE;
diff --git a/src/backends/x11/meta-backend-x11.c b/src/backends/x11/meta-backend-x11.c
index 2c49690d7..233532435 100644
--- a/src/backends/x11/meta-backend-x11.c
+++ b/src/backends/x11/meta-backend-x11.c
@@ -454,7 +454,7 @@ meta_backend_x11_post_init (MetaBackend *backend)
   META_BACKEND_CLASS (meta_backend_x11_parent_class)->post_init (backend);
 
   monitor_manager = meta_backend_get_monitor_manager (backend);
-  g_signal_connect (monitor_manager, "monitors-changed",
+  g_signal_connect (monitor_manager, "monitors-changed-internal",
                     G_CALLBACK (on_monitors_changed), backend);
 }
 
diff --git a/src/core/screen.c b/src/core/screen.c
index 890002340..be4394349 100644
--- a/src/core/screen.c
+++ b/src/core/screen.c
@@ -73,8 +73,10 @@ static void prefs_changed_callback (MetaPreference pref,
 static void set_desktop_geometry_hint (MetaScreen *screen);
 static void set_desktop_viewport_hint (MetaScreen *screen);
 
-static void on_monitors_changed (MetaMonitorManager *manager,
-                                 MetaScreen         *screen);
+static void on_monitors_changed_internal (MetaMonitorManager *manager,
+                                          MetaScreen         *screen);
+static void on_monitors_changed          (MetaMonitorManager *manager,
+                                          MetaScreen         *screen);
 
 enum
 {
@@ -710,6 +712,8 @@ meta_screen_new (MetaDisplay *display,
   screen->rect.x = screen->rect.y = 0;
 
   manager = meta_monitor_manager_get ();
+  g_signal_connect (manager, "monitors-changed-internal",
+                    G_CALLBACK (on_monitors_changed_internal), screen);
   g_signal_connect (manager, "monitors-changed",
                     G_CALLBACK (on_monitors_changed), screen);
 
@@ -2266,8 +2270,8 @@ meta_screen_resize_func (MetaWindow *window,
 }
 
 static void
-on_monitors_changed (MetaMonitorManager *manager,
-                     MetaScreen         *screen)
+on_monitors_changed_internal (MetaMonitorManager *manager,
+                              MetaScreen         *screen)
 {
   MetaBackend *backend;
   MetaCursorRenderer *cursor_renderer;
@@ -2306,7 +2310,13 @@ on_monitors_changed (MetaMonitorManager *manager,
   backend = meta_get_backend ();
   cursor_renderer = meta_backend_get_cursor_renderer (backend);
   meta_cursor_renderer_force_update (cursor_renderer);
+}
 
+static void
+on_monitors_changed (MetaMonitorManager *manager,
+                     MetaScreen         *screen)
+{
+  /* Inform the external world about what has happened */
   g_signal_emit (screen, screen_signals[MONITORS_CHANGED], 0);
 }
 
diff --git a/src/wayland/meta-wayland-outputs.c b/src/wayland/meta-wayland-outputs.c
index db8d240f2..51f62f98f 100644
--- a/src/wayland/meta-wayland-outputs.c
+++ b/src/wayland/meta-wayland-outputs.c
@@ -422,7 +422,7 @@ meta_wayland_outputs_init (MetaWaylandCompositor *compositor)
   MetaMonitorManager *monitors;
 
   monitors = meta_monitor_manager_get ();
-  g_signal_connect (monitors, "monitors-changed",
+  g_signal_connect (monitors, "monitors-changed-internal",
                     G_CALLBACK (on_monitors_changed), compositor);
 
   compositor->outputs = g_hash_table_new_full (NULL, NULL, NULL, wayland_output_destroy_notify);
-- 
2.13.5

From bef9829229295ab72c623f748e225edfd66d5272 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marco=20Trevisan=20=28Trevi=C3=B1o=29?= <mail@3v1n0.net>
Date: Fri, 13 Oct 2017 00:10:22 -0500
Subject: [PATCH 09/17] monitor-manager: use g_return_val_if_fail if trying to
 fetch an invalid monitor

https://bugzilla.gnome.org/show_bug.cgi?id=788860
---
 src/backends/meta-monitor-manager.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/backends/meta-monitor-manager.c b/src/backends/meta-monitor-manager.c
index fd2aca969..343bb060a 100644
--- a/src/backends/meta-monitor-manager.c
+++ b/src/backends/meta-monitor-manager.c
@@ -2273,7 +2273,7 @@ MetaLogicalMonitor *
 meta_monitor_manager_get_logical_monitor_from_number (MetaMonitorManager *manager,
                                                       int                 number)
 {
-  g_assert ((unsigned int) number < g_list_length (manager->logical_monitors));
+  g_return_val_if_fail ((unsigned int) number < g_list_length (manager->logical_monitors), NULL);
 
   return g_list_nth (manager->logical_monitors, number)->data;
 }
-- 
2.13.5

From c6c777a604a077359e8c1659ed3468e1f53692d5 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marco=20Trevisan=20=28Trevi=C3=B1o=29?= <mail@3v1n0.net>
Date: Fri, 13 Oct 2017 00:12:50 -0500
Subject: [PATCH 10/17] backend: move the cursor render update on screen
 changes here

https://bugzilla.gnome.org/show_bug.cgi?id=788860
---
 src/backends/meta-backend.c | 2 ++
 src/core/screen.c           | 7 -------
 2 files changed, 2 insertions(+), 7 deletions(-)

diff --git a/src/backends/meta-backend.c b/src/backends/meta-backend.c
index 89d47eb80..c856823e2 100644
--- a/src/backends/meta-backend.c
+++ b/src/backends/meta-backend.c
@@ -196,6 +196,8 @@ meta_backend_monitors_changed (MetaBackend *backend)
           priv->is_pointer_position_initialized = TRUE;
         }
     }
+
+  meta_cursor_renderer_force_update (priv->cursor_renderer);
 }
 
 void
diff --git a/src/core/screen.c b/src/core/screen.c
index be4394349..c14bba0cf 100644
--- a/src/core/screen.c
+++ b/src/core/screen.c
@@ -2273,9 +2273,6 @@ static void
 on_monitors_changed_internal (MetaMonitorManager *manager,
                               MetaScreen         *screen)
 {
-  MetaBackend *backend;
-  MetaCursorRenderer *cursor_renderer;
-
   meta_monitor_manager_get_screen_size (manager,
                                         &screen->rect.width,
                                         &screen->rect.height);
@@ -2306,10 +2303,6 @@ on_monitors_changed_internal (MetaMonitorManager *manager,
   meta_screen_foreach_window (screen, META_LIST_DEFAULT, meta_screen_resize_func, 0);
 
   meta_screen_queue_check_fullscreen (screen);
-
-  backend = meta_get_backend ();
-  cursor_renderer = meta_backend_get_cursor_renderer (backend);
-  meta_cursor_renderer_force_update (cursor_renderer);
 }
 
 static void
-- 
2.13.5

From d6e3193c2a22024e213025523d2abba36f4b7bb3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Marco=20Trevisan=20=28Trevi=C3=B1o=29?= <mail@3v1n0.net>
Date: Thu, 12 Oct 2017 20:07:12 -0500
Subject: [PATCH 11/17] workspace: ensure that workarea data is valid when
 fetching by monitor num

https://bugzilla.gnome.org/show_bug.cgi?id=788860
---
 src/core/workspace.c | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/src/core/workspace.c b/src/core/workspace.c
index f6d3c9619..901de4541 100644
--- a/src/core/workspace.c
+++ b/src/core/workspace.c
@@ -1099,13 +1099,16 @@ meta_workspace_get_work_area_for_monitor (MetaWorkspace *workspace,
   MetaLogicalMonitor *logical_monitor;
   MetaWorkspaceLogicalMonitorData *data;
 
-  ensure_work_areas_validated (workspace);
-
   logical_monitor =
     meta_monitor_manager_get_logical_monitor_from_number (monitor_manager,
                                                           which_monitor);
+  g_return_if_fail (logical_monitor != NULL);
+
+  ensure_work_areas_validated (workspace);
   data = meta_workspace_get_logical_monitor_data (workspace, logical_monitor);
 
+  g_return_if_fail (data != NULL);
+
   *area = data->logical_monitor_work_area;
 }
 
-- 
2.13.5

From 49ee46d924e36c0d5defcbfcf71bd674e200ebae Mon Sep 17 00:00:00 2001
From: Rui Matos <tiagomatos@gmail.com>
Date: Sun, 15 Oct 2017 22:44:11 +0200
Subject: [PATCH 12/17] x11/window: Don't manage InputOnly windows

This was dropped by mistake in commit
f166240225b6ab110b091520103d0370d51899ac.

https://bugzilla.gnome.org/show_bug.cgi?id=788493
---
 src/x11/window-x11.c | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/src/x11/window-x11.c b/src/x11/window-x11.c
index 4885f5fea..5a6f113b0 100644
--- a/src/x11/window-x11.c
+++ b/src/x11/window-x11.c
@@ -3039,6 +3039,12 @@ meta_window_x11_new (MetaDisplay       *display,
       goto error;
     }
 
+  if (attrs.class == InputOnly)
+    {
+      meta_verbose ("Not managing InputOnly windows\n");
+      goto error;
+    }
+
   if (is_our_xwindow (display, screen, xwindow, &attrs))
     {
       meta_verbose ("Not managing our own windows\n");
-- 
2.13.5

From d71b0d3d272046a65013b1c77f289848f8ae4ffd Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Fri, 13 Oct 2017 16:29:20 +0800
Subject: [PATCH 13/17] compositor: Ignore offscreen windows when unredirecting

When determining whether we should unredirect a window or not, ignore
offscreen windows, and just check the top most visible window.

Previously this was not an issue, but since 'stack-tracker: Keep
override redirect windows on top' we started sorting the UI frames
window, which is an offscreen override redirect window, on top, causing
the unredirect checking code to always check whether to unredirect the
UI frames window. This effectively disabled the compositor bypass
functionality.

https://bugzilla.gnome.org/show_bug.cgi?id=788493
---
 src/compositor/compositor-private.h |  2 ++
 src/compositor/compositor.c         | 47 ++++++++++++++++++++++++++++++++-----
 2 files changed, 43 insertions(+), 6 deletions(-)

diff --git a/src/compositor/compositor-private.h b/src/compositor/compositor-private.h
index ba58bf175..40c0344cc 100644
--- a/src/compositor/compositor-private.h
+++ b/src/compositor/compositor-private.h
@@ -31,6 +31,8 @@ struct _MetaCompositor
 
   CoglContext           *context;
 
+  MetaWindowActor       *top_window_actor;
+
   /* Used for unredirecting fullscreen windows */
   guint                  disable_unredirect_count;
   MetaWindow            *unredirected_window;
diff --git a/src/compositor/compositor.c b/src/compositor/compositor.c
index 17e8a55dd..a75ac12c5 100644
--- a/src/compositor/compositor.c
+++ b/src/compositor/compositor.c
@@ -923,6 +923,32 @@ sync_actor_stacking (MetaCompositor *compositor)
   g_list_free (backgrounds);
 }
 
+/*
+ * Find the top most window that is visible on the screen. The intention of
+ * this is to avoid offscreen windows that isn't actually part of the visible
+ * desktop (such as the UI frames override redirect window).
+ */
+static MetaWindowActor *
+get_top_visible_window_actor (MetaCompositor *compositor)
+{
+  GList *l;
+
+  for (l = g_list_last (compositor->windows); l; l = l->prev)
+    {
+      MetaWindowActor *window_actor = l->data;
+      MetaWindow *window = meta_window_actor_get_meta_window (window_actor);
+      MetaRectangle buffer_rect;
+
+      meta_window_get_buffer_rect (window, &buffer_rect);
+
+      if (meta_rectangle_overlap (&compositor->display->screen->rect,
+                                  &buffer_rect))
+        return window_actor;
+    }
+
+  return NULL;
+}
+
 void
 meta_compositor_sync_stack (MetaCompositor  *compositor,
 			    GList	    *stack)
@@ -1009,6 +1035,8 @@ meta_compositor_sync_stack (MetaCompositor  *compositor,
     }
 
   sync_actor_stacking (compositor);
+
+  compositor->top_window_actor = get_top_visible_window_actor (compositor);
 }
 
 void
@@ -1065,19 +1093,26 @@ static gboolean
 meta_pre_paint_func (gpointer data)
 {
   GList *l;
-  MetaWindowActor *top_window;
+  MetaWindowActor *top_window_actor;
   MetaCompositor *compositor = data;
 
   if (compositor->windows == NULL)
     return TRUE;
 
-  top_window = g_list_last (compositor->windows)->data;
-
-  if (meta_window_actor_should_unredirect (top_window) &&
+  top_window_actor = compositor->top_window_actor;
+  if (top_window_actor &&
+      meta_window_actor_should_unredirect (top_window_actor) &&
       compositor->disable_unredirect_count == 0)
-    set_unredirected_window (compositor, meta_window_actor_get_meta_window (top_window));
+    {
+      MetaWindow *top_window;
+
+      top_window = meta_window_actor_get_meta_window (top_window_actor);
+      set_unredirected_window (compositor, top_window);
+    }
   else
-    set_unredirected_window (compositor, NULL);
+    {
+      set_unredirected_window (compositor, NULL);
+    }
 
   for (l = compositor->windows; l; l = l->next)
     meta_window_actor_pre_paint (l->data);
-- 
2.13.5

From b48c3497940883816416735f992aaae61396fbda Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Fri, 13 Oct 2017 14:34:19 +0800
Subject: [PATCH 14/17] monitor-manager/xrandr: Use a single supported scales
 list for all

Under X11 we can only ever have the same scale configured on all
monitors. In order to use e.g. scale 2 when there is a HiDPI monitor
connected, we must not disallow it because there is a monitor that does
not support scale 2. Thus we must show the same scale for every monitor
and monitor mode, even though it might result in a bad experience.

Do this by iterating through all the monitors adding all supported
scales by the preferred mode, combining all the supported scales. This
supported scales list is then used for all monitor and modes no matter
what.

https://bugzilla.gnome.org/show_bug.cgi?id=788901
---
 src/backends/x11/meta-monitor-manager-xrandr.c | 103 +++++++++++++++++++++++--
 1 file changed, 95 insertions(+), 8 deletions(-)

diff --git a/src/backends/x11/meta-monitor-manager-xrandr.c b/src/backends/x11/meta-monitor-manager-xrandr.c
index c369d4960..600422032 100644
--- a/src/backends/x11/meta-monitor-manager-xrandr.c
+++ b/src/backends/x11/meta-monitor-manager-xrandr.c
@@ -71,6 +71,9 @@ struct _MetaMonitorManagerXrandr
 
   int max_screen_width;
   int max_screen_height;
+
+  float *supported_scales;
+  int n_supported_scales;
 };
 
 struct _MetaMonitorManagerXrandrClass
@@ -1481,6 +1484,17 @@ meta_monitor_manager_xrandr_ensure_initial_config (MetaMonitorManager *manager)
   meta_monitor_manager_update_logical_state_derived (manager, config);
 }
 
+static void
+meta_monitor_manager_xrandr_rebuild_derived (MetaMonitorManager *manager,
+                                             MetaMonitorsConfig *config)
+{
+  MetaMonitorManagerXrandr *manager_xrandr =
+    META_MONITOR_MANAGER_XRANDR (manager);
+
+  g_clear_pointer (&manager_xrandr->supported_scales, g_free);
+  meta_monitor_manager_rebuild_derived (manager, config);
+}
+
 static gboolean
 meta_monitor_manager_xrandr_apply_monitors_config (MetaMonitorManager      *manager,
                                                    MetaMonitorsConfig      *config,
@@ -1492,7 +1506,7 @@ meta_monitor_manager_xrandr_apply_monitors_config (MetaMonitorManager      *mana
 
   if (!config)
     {
-      meta_monitor_manager_rebuild_derived (manager, NULL);
+      meta_monitor_manager_xrandr_rebuild_derived (manager, NULL);
       return TRUE;
     }
 
@@ -1526,7 +1540,7 @@ meta_monitor_manager_xrandr_apply_monitors_config (MetaMonitorManager      *mana
         }
       else
         {
-          meta_monitor_manager_rebuild_derived (manager, config);
+          meta_monitor_manager_xrandr_rebuild_derived (manager, config);
         }
     }
 
@@ -1782,6 +1796,76 @@ meta_monitor_manager_xrandr_calculate_monitor_mode_scale (MetaMonitorManager *ma
   return meta_monitor_calculate_mode_scale (monitor, monitor_mode);
 }
 
+static void
+add_supported_scale (GArray *supported_scales,
+                     float   scale)
+{
+  unsigned int i;
+
+  for (i = 0; i < supported_scales->len; i++)
+    {
+      float supported_scale = g_array_index (supported_scales, float, i);
+
+      if (scale == supported_scale)
+        return;
+    }
+
+  g_array_append_val (supported_scales, scale);
+}
+
+static int
+compare_scales (gconstpointer a,
+                gconstpointer b)
+{
+  float f = *(float *) a - *(float *) b;
+
+  if (f < 0)
+    return -1;
+  if (f > 0)
+    return 1;
+  return 0;
+}
+
+static void
+ensure_supported_monitor_scales (MetaMonitorManager *manager)
+{
+  MetaMonitorManagerXrandr *manager_xrandr =
+    META_MONITOR_MANAGER_XRANDR (manager);
+  MetaMonitorScalesConstraint constraints;
+  GList *l;
+  GArray *supported_scales;
+
+  if (manager_xrandr->supported_scales)
+    return;
+
+  constraints = META_MONITOR_SCALES_CONSTRAINT_NO_FRAC;
+  supported_scales = g_array_new (FALSE, FALSE, sizeof (float));
+
+  for (l = manager->monitors; l; l = l->next)
+    {
+      MetaMonitor *monitor = l->data;
+      MetaMonitorMode *monitor_mode;
+      float *monitor_scales;
+      int n_monitor_scales;
+      int i;
+
+      monitor_mode = meta_monitor_get_preferred_mode (monitor);
+      monitor_scales =
+        meta_monitor_calculate_supported_scales (monitor,
+                                                 monitor_mode,
+                                                 constraints,
+                                                 &n_monitor_scales);
+
+      for (i = 0; i < n_monitor_scales; i++)
+        add_supported_scale (supported_scales, monitor_scales[i]);
+      g_array_sort (supported_scales, compare_scales);
+    }
+
+  manager_xrandr->supported_scales = (float *) supported_scales->data;
+  manager_xrandr->n_supported_scales = supported_scales->len;
+  g_array_free (supported_scales, FALSE);
+}
+
 static float *
 meta_monitor_manager_xrandr_calculate_supported_scales (MetaMonitorManager          *manager,
                                                         MetaLogicalMonitorLayoutMode layout_mode,
@@ -1789,12 +1873,14 @@ meta_monitor_manager_xrandr_calculate_supported_scales (MetaMonitorManager
                                                         MetaMonitorMode             *monitor_mode,
                                                         int                         *n_supported_scales)
 {
-  MetaMonitorScalesConstraint constraints;
+  MetaMonitorManagerXrandr *manager_xrandr =
+    META_MONITOR_MANAGER_XRANDR (manager);
 
-  constraints = META_MONITOR_SCALES_CONSTRAINT_NO_FRAC;
-  return meta_monitor_calculate_supported_scales (monitor, monitor_mode,
-                                                  constraints,
-                                                  n_supported_scales);
+  ensure_supported_monitor_scales (manager);
+
+  *n_supported_scales = manager_xrandr->n_supported_scales;
+  return g_memdup (manager_xrandr->supported_scales,
+                   manager_xrandr->n_supported_scales * sizeof (float));
 }
 
 static MetaMonitorManagerCapability
@@ -1874,6 +1960,7 @@ meta_monitor_manager_xrandr_finalize (GObject *object)
   manager_xrandr->resources = NULL;
 
   g_hash_table_destroy (manager_xrandr->tiled_monitor_atoms);
+  g_free (manager_xrandr->supported_scales);
 
   G_OBJECT_CLASS (meta_monitor_manager_xrandr_parent_class)->finalize (object);
 }
@@ -1949,7 +2036,7 @@ meta_monitor_manager_xrandr_handle_xevent (MetaMonitorManagerXrandr *manager_xra
           config = NULL;
         }
 
-      meta_monitor_manager_rebuild_derived (manager, config);
+      meta_monitor_manager_xrandr_rebuild_derived (manager, config);
     }
 
   return TRUE;
-- 
2.13.5

From c0dc66e8c0dfc6ab02506343dc8418891159657c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Wed, 18 Oct 2017 23:22:01 +0800
Subject: [PATCH 15/17] monitor/normal: Prefer modes with same flags as
 preferred mode

When generating MetaMonitorMode's, prefer CRTC modes that has the same
set of flags as the preferred mode. This not only is probably a better
set of configurable modes, but it'll guarantee that the preferred mode
is added.

This fixes a crash when the preferred mode was not the first mode with
the same resolution, refresh rate and set of handled modes.

https://bugzilla.gnome.org/show_bug.cgi?id=789153
---
 src/backends/meta-monitor.c | 41 ++++++++++++++++++++++++++++++++---------
 1 file changed, 32 insertions(+), 9 deletions(-)

diff --git a/src/backends/meta-monitor.c b/src/backends/meta-monitor.c
index 8ca6ea859..2d06a1e36 100644
--- a/src/backends/meta-monitor.c
+++ b/src/backends/meta-monitor.c
@@ -394,16 +394,22 @@ generate_mode_id (MetaMonitorModeSpec *monitor_mode_spec)
 
 static gboolean
 meta_monitor_add_mode (MetaMonitor     *monitor,
-                       MetaMonitorMode *monitor_mode)
+                       MetaMonitorMode *monitor_mode,
+                       gboolean         replace)
 {
   MetaMonitorPrivate *priv = meta_monitor_get_instance_private (monitor);
+  MetaMonitorMode *existing_mode;
 
-  if (g_hash_table_lookup (priv->mode_ids,
-                           meta_monitor_mode_get_id (monitor_mode)))
+  existing_mode = g_hash_table_lookup (priv->mode_ids,
+                                       meta_monitor_mode_get_id (monitor_mode));
+  if (existing_mode && !replace)
     return FALSE;
 
+  if (existing_mode)
+    priv->modes = g_list_remove (priv->modes, existing_mode);
+
   priv->modes = g_list_append (priv->modes, monitor_mode);
-  g_hash_table_insert (priv->mode_ids, monitor_mode->id, monitor_mode);
+  g_hash_table_replace (priv->mode_ids, monitor_mode->id, monitor_mode);
 
   return TRUE;
 }
@@ -415,13 +421,17 @@ meta_monitor_normal_generate_modes (MetaMonitorNormal *monitor_normal)
   MetaMonitorPrivate *monitor_priv =
     meta_monitor_get_instance_private (monitor);
   MetaOutput *output;
+  MetaCrtcModeFlag preferred_mode_flags;
   unsigned int i;
 
   output = meta_monitor_get_main_output (monitor);
+  preferred_mode_flags = output->preferred_mode->flags;
+
   for (i = 0; i < output->n_modes; i++)
     {
       MetaCrtcMode *crtc_mode = output->modes[i];
       MetaMonitorMode *mode;
+      gboolean replace;
 
       mode = g_new0 (MetaMonitorMode, 1);
       mode->spec = (MetaMonitorModeSpec) {
@@ -437,13 +447,26 @@ meta_monitor_normal_generate_modes (MetaMonitorNormal *monitor_normal)
         .crtc_mode = crtc_mode
       };
 
+      /*
+       * We don't distinguish between all available mode flags, just the ones
+       * that are configurable. We still need to pick some mode though, so
+       * prefer ones that has the same set of flags as the preferred mode;
+       * otherwise take the first one in the list. This guarantees that the
+       * preferred mode is always added.
+       */
+      replace = crtc_mode->flags == preferred_mode_flags;
+
+      if (!meta_monitor_add_mode (monitor, mode, replace))
+        {
+          g_assert (crtc_mode != output->preferred_mode);
+          meta_monitor_mode_free (mode);
+          continue;
+        }
+
       if (crtc_mode == output->preferred_mode)
         monitor_priv->preferred_mode = mode;
       if (output->crtc && crtc_mode == output->crtc->current_mode)
         monitor_priv->current_mode = mode;
-
-      if (!meta_monitor_add_mode (monitor, mode))
-        meta_monitor_mode_free (mode);
     }
 }
 
@@ -825,7 +848,7 @@ generate_tiled_monitor_modes (MetaMonitorTiled *monitor_tiled)
 
       tiled_modes = g_list_remove_link (tiled_modes, l);
 
-      if (!meta_monitor_add_mode (monitor, mode))
+      if (!meta_monitor_add_mode (monitor, mode, FALSE))
         {
           meta_monitor_mode_free (mode);
           continue;
@@ -967,7 +990,7 @@ generate_untiled_monitor_modes (MetaMonitorTiled *monitor_tiled)
       if (!mode)
         continue;
 
-      if (!meta_monitor_add_mode (monitor, mode))
+      if (!meta_monitor_add_mode (monitor, mode, FALSE))
         {
           meta_monitor_mode_free (mode);
           continue;
-- 
2.13.5

From 297027b8cb7a259907e4be190de1c4a44aa83593 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jonas=20=C3=85dahl?= <jadahl@gmail.com>
Date: Wed, 18 Oct 2017 23:24:36 +0800
Subject: [PATCH 16/17] monitor-unit-tests: Check non-first preferred modes

Check that if there are multiple modes with the same ID (resolution,
refresh rate and handled flags) we correctly add the preferred mode to
the list of monitor modes.

https://bugzilla.gnome.org/show_bug.cgi?id=789153
---
 src/backends/meta-monitor.c    |  2 -
 src/backends/meta-monitor.h    |  2 +
 src/tests/monitor-unit-tests.c | 99 +++++++++++++++++++++++++++++++++++++++++-
 3 files changed, 100 insertions(+), 3 deletions(-)

diff --git a/src/backends/meta-monitor.c b/src/backends/meta-monitor.c
index 2d06a1e36..f9233251c 100644
--- a/src/backends/meta-monitor.c
+++ b/src/backends/meta-monitor.c
@@ -34,8 +34,6 @@
 #define MINIMUM_LOGICAL_HEIGHT 600
 #define MAXIMUM_REFRESH_RATE_DIFF 0.001
 
-#define HANDLED_CRTC_MODE_FLAGS (META_CRTC_MODE_FLAG_INTERLACE)
-
 typedef struct _MetaMonitorMode
 {
   char *id;
diff --git a/src/backends/meta-monitor.h b/src/backends/meta-monitor.h
index f4260d61f..e6f394b07 100644
--- a/src/backends/meta-monitor.h
+++ b/src/backends/meta-monitor.h
@@ -48,6 +48,8 @@ typedef struct _MetaMonitorCrtcMode
   MetaCrtcMode *crtc_mode;
 } MetaMonitorCrtcMode;
 
+#define HANDLED_CRTC_MODE_FLAGS (META_CRTC_MODE_FLAG_INTERLACE)
+
 typedef gboolean (* MetaMonitorModeFunc) (MetaMonitor         *monitor,
                                           MetaMonitorMode     *mode,
                                           MetaMonitorCrtcMode *monitor_crtc_mode,
diff --git a/src/tests/monitor-unit-tests.c b/src/tests/monitor-unit-tests.c
index b2d18c48b..e65c30291 100644
--- a/src/tests/monitor-unit-tests.c
+++ b/src/tests/monitor-unit-tests.c
@@ -419,7 +419,7 @@ check_monitor_mode (MetaMonitor         *monitor,
       flags = meta_monitor_mode_get_flags (mode);
 
       g_assert_cmpfloat (refresh_rate, ==, crtc_mode->refresh_rate);
-      g_assert_cmpint (flags, ==, crtc_mode->flags);
+      g_assert_cmpint (flags, ==, (crtc_mode->flags & HANDLED_CRTC_MODE_FLAGS));
     }
 
   data->expect_crtc_mode_iter++;
@@ -2731,6 +2731,101 @@ meta_test_monitor_underscanning_config (void)
 }
 
 static void
+meta_test_monitor_preferred_non_first_mode (void)
+{
+  MonitorTestCase test_case = {
+    .setup = {
+      .modes = {
+        {
+          .width = 800,
+          .height = 600,
+          .refresh_rate = 60.0,
+          .flags = META_CRTC_MODE_FLAG_NHSYNC,
+        },
+        {
+          .width = 800,
+          .height = 600,
+          .refresh_rate = 60.0,
+          .flags = META_CRTC_MODE_FLAG_PHSYNC,
+        },
+      },
+      .n_modes = 2,
+      .outputs = {
+        {
+          .crtc = -1,
+          .modes = { 0, 1 },
+          .n_modes = 2,
+          .preferred_mode = 1,
+          .possible_crtcs = { 0 },
+          .n_possible_crtcs = 1,
+          .width_mm = 222,
+          .height_mm = 125
+        }
+      },
+      .n_outputs = 1,
+      .crtcs = {
+        {
+          .current_mode = -1
+        }
+      },
+      .n_crtcs = 1
+    },
+
+    .expect = {
+      .monitors = {
+        {
+          .outputs = { 0 },
+          .n_outputs = 1,
+          .modes = {
+            {
+              .width = 800,
+              .height = 600,
+              .refresh_rate = 60.0,
+              .crtc_modes = {
+                {
+                  .output = 0,
+                  .crtc_mode = 1
+                }
+              }
+            },
+          },
+          .n_modes = 1,
+          .current_mode = 0,
+          .width_mm = 222,
+          .height_mm = 125
+        }
+      },
+      .n_monitors = 1,
+      .logical_monitors = {
+        {
+          .monitors = { 0 },
+          .n_monitors = 1,
+          .layout = { .x = 0, .y = 0, .width = 800, .height = 600 },
+          .scale = 1
+        },
+      },
+      .n_logical_monitors = 1,
+      .primary_logical_monitor = 0,
+      .n_outputs = 1,
+      .crtcs = {
+        {
+          .current_mode = 1,
+        }
+      },
+      .n_crtcs = 1,
+      .screen_width = 800,
+      .screen_height = 600,
+    }
+  };
+  MetaMonitorTestSetup *test_setup;
+
+  test_setup = create_monitor_test_setup (&test_case,
+                                          MONITOR_TEST_FLAG_NO_STORED);
+  emulate_hotplug (test_setup);
+  check_monitor_configuration (&test_case);
+}
+
+static void
 meta_test_monitor_custom_vertical_config (void)
 {
   MonitorTestCase test_case = {
@@ -5317,6 +5412,8 @@ init_monitor_tests (void)
                     meta_test_monitor_no_outputs);
   add_monitor_test ("/backends/monitor/underscanning-config",
                     meta_test_monitor_underscanning_config);
+  add_monitor_test ("/backends/monitor/preferred-non-first-mode",
+                    meta_test_monitor_preferred_non_first_mode);
 
   add_monitor_test ("/backends/monitor/custom/vertical-config",
                     meta_test_monitor_custom_vertical_config);
-- 
2.13.5

From 6eacf9a398da3db6152566abe5cc6b6e0afd9a3d Mon Sep 17 00:00:00 2001
From: Rui Matos <tiagomatos@gmail.com>
Date: Tue, 17 Oct 2017 17:17:55 +0200
Subject: [PATCH 17/17] compositor: Avoid a crash if the top window actor is
 finalized

Since we're not holding a reference, the top window actor might be
finalized when we paint resulting in a use after free crash.

https://bugzilla.gnome.org/show_bug.cgi?id=788493
---
 src/compositor/compositor.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/src/compositor/compositor.c b/src/compositor/compositor.c
index a75ac12c5..1d5b9ab20 100644
--- a/src/compositor/compositor.c
+++ b/src/compositor/compositor.c
@@ -671,6 +671,9 @@ meta_compositor_remove_window (MetaCompositor *compositor,
   if (compositor->unredirected_window == window)
     set_unredirected_window (compositor, NULL);
 
+  if (compositor->top_window_actor == window_actor)
+    compositor->top_window_actor = NULL;
+
   meta_window_actor_destroy (window_actor);
 }
 
-- 
2.13.5

